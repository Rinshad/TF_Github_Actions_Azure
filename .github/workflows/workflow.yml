name: 'Terraform GitHub Workflow'

on:
  pull_request:
    branches:
      - master
    paths:
      - '**/*.tf'
      - '**/*.tfvars'
      - '**/*.hcl'
      - '**/*.tfstate'
  push:
    branches:
      - master

env: 
  ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}

permissions:
  contents: read

jobs:
  terraform-plan:
    name: 'Terraform Plan' 
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    env:
      # This is needed since we are running Terraform with read-only permissions
      ARM_SKIP_PROVIDER_REGISTRATION: true

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v4

      # Install the latest version of Terraform CLI 
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        run: terraform init

      # Generates an execution plan for Terraform
      - name: Terraform Plan
        run: terraform plan -var-file="dev.tfvars" -input=false

  terraform-apply:
    name: 'Terraform Apply' 
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'
    env:
      # This is needed since we are running Terraform with read-only permissions
      ARM_SKIP_PROVIDER_REGISTRATION: true

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v4

      # Install the latest version of Terraform CLI 
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        run: terraform init

      # Apply the changes required to reach the desired state of the configuration
      - name: Terraform Apply
        run: terraform apply -var-file="dev.tfvars" -auto-approve -input=false

